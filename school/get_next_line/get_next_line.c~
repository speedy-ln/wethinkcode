/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_next_line.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: lnkadime <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2016/05/17 17:23:03 by lnkadime          #+#    #+#             */
/*   Updated: 2016/05/19 18:13:36 by lnkadime         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "get_next_line.h"
#include "libft.h"
#include <string.h>
#include <stdio.h>
#include <fcntl.h>

char		*ft_realloc(char *str, int i)
{
	char	*temp;
	int	j;

	j = 0;
	temp = (char*)malloc(sizeof(str) + i + 1);
	while (j != i)
	{
		temp[j] = str[j];
		j++;
	}
	free(str);
	return (temp);
}

char	*ft_del_pre_str(char *str, int i)
{
	char	*temp;
	int	j;

	j = 0;
	temp = (char*)malloc(sizeof(str) - i);
	while (str[i - 1])
	{
		temp[j] = str[i - 1];
		i++;
		j++;
	}
	free(str);
	return (temp);
}

int		get_next_line(const int fd, char **line)
{
	static	char	*unread;
	static	int	file_read;
	ssize_t		ret;
	char		*str;
	ssize_t		i;

	*line = NULL;
	i = 0;
	str = (char *)malloc(sizeof(char*) * BUFF_SIZE);
	unread = (char *)malloc(sizeof(str));
	while ((ret = read(fd, str, BUFF_SIZE)) && file_read != 0)
	{
		unread = ft_realloc(str, BUFF_SIZE);
		if(ret == 0)
			file_read = 1;
	}
	while (unread[i] != '\n')
	{
		*line[i] = unread[i];
		i++;
	}
	return (1);
}

int		main()
{
	int			fd;
	char		**str;

	str = (char**)malloc(sizeof(char) * BUFF_SIZE);
	fd = open("text.txt", O_RDONLY);
	get_next_line(fd, str);
	close(fd);
	printf("%s\n", *str);
	return (0);
}
